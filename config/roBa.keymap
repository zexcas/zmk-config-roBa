// #includeのあとのあたりにスクロール量変更の定義を追記

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

// AutoMouseLayer改修(20251005)

#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mkp_input_listener { input-processors = <&zip_temp_layer 4 8000>; };//クリック後のAML滞在時間

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
    tapping-term-ms = <400>;//長押し時間判定時間
};

&trackball {
    //automouse-layer = <4>;

    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";
        Escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0>;
            require-prior-idle-ms = <500>;//直前キー押下からxx ms以内では発動無効
        };

        LangChange {
            bindings = <&kp LA(GRAVE)>;
            key-positions = <1 10>;
        };
        ComF6 {
            bindings = <&kp F6>;
            key-positions = <0 1>;
        };
        ComF7 {
            bindings = <&kp F7>;
            key-positions = <0 2>;
        };
        ComF10 {
            bindings = <&kp F10>;
            key-positions = <0 3>;
        };

        PrintSC1 {
            bindings = <&kp LS(LG(S))>;
            key-positions = <16 17>;
        };

        AltPrintSC {
            bindings = <&kp LA(PRINTSCREEN)>;
            key-positions = <16 28>;
        };

        //LeftClick {
        //    bindings = <&mkp MB1>;
        //    key-positions = <20 31>;
        //};
        RightClick {
            bindings = <&mkp MB2>;
            key-positions = <20 21>;
        };
        Win {
            bindings = <&kp LEFT_GUI>;
            key-positions = <37 39>;
        };
        WinD {
            bindings = <&kp LG(D)>;
            key-positions = <37 38 39>;
        };
        Pw1 {
            bindings = <&pw1>;
            key-positions = <1 4>;
        };
        UPw2 {
            bindings = <&upw2>;
            key-positions = <11 13>;
        };
        Pw2 {
            bindings = <&pw2>;
            key-positions = <11 14>;
        };
        UPw3 {
            bindings = <&upw3>;
            key-positions = <23 25>;
        };
        Pw3 {
            bindings = <&pw3>;
            key-positions = <23 26>;
        };
        SCWM {
            bindings = <&scwm>;
            key-positions = <28 30>;
        };
        SE16N {
            bindings = <&se16n>;
            key-positions = <28 29 30>;
        };
        AutoPic {
            bindings = <&autoPic>;
            key-positions = <16 17 18>;
        };

        //Amuhennkann {
        //    bindings = <&to_layer_0 INT_MUHENKAN>;
        //    key-positions = <11 10>;
        //};
        //ShortTapF5 {
        //    bindings = <&kp F5>;
        //    key-positions = <11 36>;
        //};
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        pw1: pw1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(B) &kp E &kp N &kp G &kp N9 &kp N5 &kp N4 &kp N3 &kp MINUS &kp N1 &kp N1 &kp N1 &kp ENTER>;
            label = "PW1";
        };

        pw2: pw2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp K &kp K &kp C &kp MINUS &kp JP_AT &kp N9 &kp N5 &kp N4 &kp N3 &kp ENTER>;
            label = "PW2";
        };

        pw3: pw3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(W) &kp A &kp X &kp G &kp U &kp N &kp N7 &kp JP_PLUS &kp ENTER>;
            label = "PW3";
        };
        upw2: upw2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp B &kp N1 &kp N7 &kp N7 &kp N8 &kp N0 &kp TAB &kp K &kp K &kp C &kp MINUS &kp JP_AT &kp N9 &kp N5 &kp N4 &kp N3 &kp ENTER>;
            label = "UPW2";
        };

        upw3: upw3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp K &kp I &kp K &kp U &kp C &kp H &kp H &kp N4 &kp TAB &kp LS(W) &kp A &kp X &kp G &kp U &kp N &kp N7 &kp JP_PLUS &kp ENTER>;
            label = "UPW3";
        };
        scwm: scwm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp SLASH &kp N &kp SLASH &kp S &kp C &kp W &kp M &kp SLASH>;
            label = "scwm";
        };
        se16n: se16n {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp SLASH &kp O &kp S &kp E &kp N1 &kp N6 &kp N &kp ENTER>;
            label = "se16n";
        };
        autoPic: autoPic {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LA(PRINTSCREEN) &none &none &kp LA(TAB) &none &none &none &none &kp LC(V) &none &none &kp PAGE_DOWN &none &none &kp LA(TAB)>;
            label = "autoPic";
        };
    };

    // combosやmacrosと同じ階層に以下のbihaviorsを追記
    // スクロール方向を逆にしたい場合は <&msc SCRL_DOWN> と <&msc SCRL_UP> を入れ替えてください

    behaviors {
        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    behaviors {
        new_behavior: new_behavior {
            compatible = "zmk,behavior-caps-word";
            label = "NEW_BEHAVIOR";
            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            continue-list = <A>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
//&trans                         &mt F6 W      &mt F7 E  &mt F10 R               &mt F8 T                                                        &mt F1 Y       &kp U  &kp I           &kp O           &kp P
&trans                         &kp W         &kp E               &kp R                   &mt F8 T                                                        &mt F1 U         &kp I           &kp O  &kp Y         &kp P
&kp A                          &mt F5 S      &mt F4 D            &mt F3 F                &mt F2 G   &kp LS(LC(X))           &kp MINUS                    &mt F11 H      &kp K  &kp J           &kp UP_ARROW    &kp ENTER
&mt LEFT_SHIFT TAB             &kp Z         &mt Q X             &kp C                   &kp V      &mt LEFT_CONTROL L      &kp B                        &kp N          &kp M  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW
&lt_to_layer_0 2 LEFT_CONTROL  &kp LEFT_ALT  &mt LEFT_SHIFT TAB  &lt_to_layer_0 1 SPACE  &kp SPACE  &kp DELETE              &lt_to_layer_0 1 LEFT_SHIFT  &kp BACKSPACE                                         &mt PERIOD COMMA
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        TenKey {
            bindings = <
&trans             &kp JP_LBRACKET    &kp JP_RBRACKET       &kp LS(NUMBER_2)  &kp LS(N7)                                           &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_4  &kp KP_NUMBER_5
&kp LS(NUMBER_6)   &kp LS(N8)         &kp LS(N9)            &kp LS(SLASH)     &kp JP_AT          &caps_word        &kp KP_NUMBER_0  &kp PERIOD       &kp KP_NUMBER_6  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9
&trans             &kp LS(LESS_THAN)  &kp LS(GREATER_THAN)  &kp LS(NUMBER_1)  &kp JP_UNDERSCORE  &kp LS(APOS)      &kp RS(UNDER)    &kp COLON        &kp SLASH        &kp LC(PAGE_UP)  &kp PAGE_DOWN    &kp LC(PAGE_DOWN)
&trans             &trans             &trans                &trans            &trans             &trans            &trans           &trans                                                              &mt SEMICOLON APOS
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        Ctrl {
            bindings = <
&trans              &kp LC(W)         &kp LC(E)  &kp LC(R)  &kp LC(T)                                                     &kp LC(U)  &kp LC(NUMBER_1)  &kp LC(NUMBER_5)    &kp LC(Y)           &kp LC(P)
&kp LC(A)           &kp LC(Y)         &kp LC(D)  &kp LC(F)  &kp LC(G)  &kp LC(LA(KP_NUMBER_0))      &mt LC(S) LEFT_SHIFT  &kp LC(H)         &kp LC(K)     &kp LC(J)           &kp LC(UP_ARROW)    &kp LC(ENTER)
&kp LC(LEFT_SHIFT)  &kp LC(Z)         &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(L)                    &kp LC(B)             &kp LC(N)         &kp LC(M)  &kp LC(LEFT_ARROW)  &kp LC(DOWN_ARROW)  &kp LC(RIGHT_ARROW)
&trans              &kp LC(LEFT_ALT)  &trans     &trans     &trans     &kp LC(DELETE)               &trans                &trans                                                                 &kp LC(SEMICOLON)
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        xxxAlt {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans    &trans                       &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &mkp MB1  &lt_to_layer_0 5 LEFT_SHIFT  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans    &trans                       &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                 &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                        &trans    &trans         &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &sl 6     &trans    &kp PAGE_UP    &kp LC(PAGE_UP)  &trans  &kp LC(PAGE_DOWN)
&trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans    &kp PAGE_DOWN  &kp LC(PAGE_UP)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &mkp MB5  &mkp MB4                                          &trans
            >;
        };

        layer_6 {
            bindings = <
&bootloader  &trans        &trans        &trans        &trans                      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans       &trans        &trans        &trans        &trans  &trans      &trans  &trans        &trans        &trans        &trans        &trans
&trans       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &trans  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans       &trans        &trans        &trans        &trans  &trans      &trans  &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
